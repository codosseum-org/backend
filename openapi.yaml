openapi: 3.1.0
servers:
  # Added by API Auto Mocking Plugin
  - description: SwaggerHub API Auto Mocking
    url: https://virtserver.swaggerhub.com/ALEXLJWOOD24/Codosseum/1.0.0
info:
  description: "This document specifies the HTTP API of a codosseum backend server."
  version: "0.1.0"
  title: Codosseum API
  license:
    name: Affero General Public License 3.0 or later
    identifier: AGPL-3.0-or-later
tags:
  - name: games
    description: Things to do with games
  - name: developers
    description: Operations available to regular developers
paths:
  /games:
    post:
      tags:
        - games
      operationId: createGame
      description: Create a new game
      responses:
        "201":
          description: new game created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CreatedGame"
        "400":
          description: "invalid input, object invalid"
        "409":
          description: If your IP address has already created a game in progress
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/GameSettings"
        description: Settings for the new game
  /games/{id}:
    parameters:
      - $ref: "#/components/parameters/pathGameId"

    get:
      tags: [games]
      operationId: getGameInfo
      summary: Get everything known about a game
      responses:
        "200":
          description: success
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: "#/components/schemas/InWarmupGameInfo"
                  - $ref: "#/components/schemas/InProgressGameInfo"
                  - $ref: "#/components/schemas/RoundEndedGameInfo"
        "404":
          description: game does not exist

    patch:
      tags: [games]
      operationId: updateGame
      summary: Update game settings
      description: (Partially) updates the settings of an existing game. This is only possible during the warmup phase of the game.
      security:
        - gameKey: [admin]
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/GameSettings"
      responses:
        "200":
          description: success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GameSettings"
        "400":
          description: malformed request body
        "401":
          description: No valid key provided
        "403":
          description: Key doesn't have admin privileges (cannot update game)
        "404":
          description: game does not exist

    delete:
      tags: [games]
      operationId: deleteGame
      summary: Delete a game
      description: Can be used by the admin of a game to delete it while in warmup.
      security:
        - gameKey: [admin]
      responses:
        "204":
          description: Sucessfully deleted
        "401":
          description: No valid key provided
        "403":
          description: Key doesn't have admin privileges
        "404":
          description: game does not exist

  /games/{id}/participants:
    parameters:
      - $ref: "#/components/parameters/pathGameId"

    post:
      tags: [games]
      operationId: joinGame
      description: Join a game

      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/GameParticipant"

      responses:
        "200":
          description: Successfully joined the game
          content:
            application/json:
              schema:
                type: object
                required:
                  - key
                properties:
                  key:
                    type: string
                    description: A submission key that can be used to submit code to the game
        "400":
          description: Malformed request body
        "404":
          description: If the game does not exist
        "409":
          description: |
            If the game is not in a joinable state,
            or if the player has already joined the game (by IP address),
            or if a username is provided and it is already taken
    get:
      tags: [games]
      operationId: getGameParticipants
      description: Get list of participants
      responses:
        "200":
          description: success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GameParticipants"

  /games/{id}/participants/@self:
    parameters:
      - $ref: "#/components/parameters/pathGameId"

    delete:
      tags: [games]
      operationId: leaveGame
      description: Leave a game
      security:
        - gameKey: []
      responses:
        "204":
          description: Successfully left game
        "401":
          description: Not authenticated with a submission key
        "409":
          description: Not a participant of this game (anymore)
        "404":
          description: If the game does not exist

  /games/{id}/start:
    parameters:
      - $ref: "#/components/parameters/pathGameId"

    post:
      tags: [games]
      operationId: startGame
      description: Forcefully start a game, regardless of player-count and warmup time
      security:
        - gameKey: [admin]
      responses:
        "204":
          description: Successfully started the game. Further info will be received via server-sent events.
        "404":
          description: game does not exist
        "409":
          description: If the game is already started

  /games/{id}/template:
    parameters:
      - $ref: "#/components/parameters/pathGameId"

    get:
      tags: [games]
      operationId: getCodeTemplate
      description: Get a code template for the current challenge for the specified programming language
      parameters:
        - name: lang
          in: query
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Template created and sent successfully
          content:
            text/plain:
              description: the code
        "400":
          description: invalid language
        "404":
          description: game does not exist
        "409":
          description: no active round in this game, therefore no template available


  /games/{id}/solutions/test:
    parameters:
      - $ref: "#/components/parameters/pathGameId"

    post:
      tags: [games, solutions]
      operationId: testSolution
      description: Test a given solution to a game's challenges, returning the test results without submitting the solution
      security:
        - gameKey: []
      requestBody:
        content:
          application/json:
            schema:
              type: object
              allOf:
                - $ref: "#/components/schemas/Submission"
              properties:
                testNumbers:
                  type: array
                  items:
                    type: integer
                  description: The test numbers (public tests) to run the code against. If omitted, all tests will be run.

      responses:
        "200":
          # Should we introduce a mechanism to cancel tests?
          description: Acknowledgement that the solution was received and is being tested, results will be sent via Server-Sent Events
          content:
            application/json:
              schema:
                type: object
                properties:
                  testId:
                    type: string
                    description: An string to allow clients to associate future incoming test results with which request they respond to.

        "400":
          description: malformed request body

        "404":
          description: game does not exist

        "409":
          description:
            If the game is not in a state where solutions can be tested,
            or the player has already submitted a solution,
            or the player is not in the game

  /games/{id}/solutions/submit:
    parameters:
      - $ref: "#/components/parameters/pathGameId"
    post:
      tags: [games, solutions]
      operationId: submitSolution
      description: Submit a solution to a game's challenges
      security:
        - gameKey: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Submission"

      responses:
        "204":
          description: Acknowledgement that the solution was received and is being tested, results will be sent via Server-Sent Events. The submission token is invalidated and may not be used again.

        "400":
          description: malformed request body

        "404":
          description: game does not exist

        "409":
          description:
            If the game is not in a state where solutions can be submitted,
            or the player has already submitted a solution,
            or the player is not in the game

  # Server-sent events (SSE) are a crucial part of this API.
  # In the path definition below, they're described using OAS but clients probably can't rely on tooling to implement this for them.
  # The event stram is described as an array whose items are of "one of" the event types.
  # (Inspiration taken from https://github.com/OAI/OpenAPI-Specification/issues/396#issuecomment-894718960)
  # Event IDs may be sent as well, even though they're not specified here. The data section of the events is always encoded as JSON.
  /games/{id}/events:
    parameters:
      - $ref: "#/components/parameters/pathGameId"
    get:
      tags: [games]
      operationId: subscribeToGameEvents
      summary: Receive events relating to a game
      description: |
        You should use a tool specifically for server-sent events for interacting with this endpoint.
        Authentication with a *game key* is optional - if a game key for the specified game is provided,
        the server will send events that are exclusive to the corresponding participant, such as test results.
      security:
        - gameKey: []
        - {}
      responses:
        "200":
          description: Success - events will be sent.
          content:
            text/event-stream:
              schema:
                type: array
                format: event-stream
                items:
                  oneOf:
                    - type: object
                      properties:
                        event:
                          const: playerJoin
                        data:
                          $ref: "#/components/schemas/PlayerJoinEvent"
                    - type: object
                      properties:
                        event:
                          const: playerLeave
                        data:
                          $ref: "#/components/schemas/PlayerLeaveEvent"
                    - type: object
                      properties:
                        event:
                          const: roundStart
                        data:
                          $ref: "#/components/schemas/RoundStartEvent"
                    - type: object
                      properties:
                        event:
                          const: roundEnd
                        data:
                          $ref: "#/components/schemas/RoundEndEvent"
                    - type: object
                      properties:
                        event:
                          const: playerSubmit
                        data:
                          $ref: "#/components/schemas/PlayerSubmitEvent"
                    - type: object
                      properties:
                        event:
                          const: playerCodeReveal
                        data:
                          $ref: "#/components/schemas/PlayerCodeRevealEvent"
                    - type: object
                      properties:
                        event:
                          const: playerFinish
                        data:
                          $ref: "#/components/schemas/PlayerFinishEvent"
                    - type: object
                      properties:
                        event:
                          const: testResult
                        data:
                          $ref: "#/components/schemas/TestResultEvent"
                    - type: object
                      properties:
                        event:
                          const: sync
                        data:
                          $ref: "#/components/schemas/SyncEvent"
        "401":
          description: Authentication (game key) is provided but it is not valid for this game. This is *not* returned if *no* authentication is provided.
        "409":
          description: Game is already over.



components:
  securitySchemes:
    gameKey:
      type: apiKey
      description: |
        A key belonging to a participant of a game.
        Is used to identify participants when they perform actions relating to themselves,
        such as submitting a solution or leaving their game.

        Game keys can be either *admin* (role "admin") or *regular* keys (no roles).
        An admin key is given to the creator of a game and enables management of the game.
      name: Authorization
      in: header

  parameters:
    pathGameId:
      in: path
      name: id
      required: true
      description: Game ID (returned from creating a game)
      schema:
        type: string

  schemas:

    # Events
    PlayerJoinEvent:
      type: object
    PlayerLeaveEvent:
      type: object
    RoundStartEvent:
      type: object
    RoundEndEvent:
      type: object
    PlayerSubmitEvent:
      type: object
    PlayerCodeRevealEvent:
      type: object
    PlayerFinishEvent:
      type: object
    TestResultEvent:
      type: object
    SyncEvent:
      type: object

    # Other
    Submission:
      type: object
      required:
        - submissionToken
        - language
        - code
      properties:
        submissionToken:
          type: string
          description: A submission token for the game, obtained by joining the game

        language:
          type: string
          description: The language of the solution attempt, as an identifier supported by Piston

        code:
          type: string
          description: The code to test, which is assumed to be in the language specified

    CreatedGame:
      type: object
      description: A newly created game
      allOf: [$ref: "#/components/schemas/GameSettings"]
      required:
        - adminKey
        - joinCode
        # everything from GameSettings
        - allowedLanguages
        - allowedGameModes
        - maxPlayers
        - timeLimit
        - maxWarmupTime

      properties:
        adminKey:
          type: string
          description: A key that can be used to perform admin actions on the game, such as starting it.
        joinCode:
          type: string
          description: A code that can be used to join the game

    InWarmupGameInfo:
      type: object
      description: Information about a game that has been created but not yet started, i.e. it is in its warmup phase
      allOf:
        - $ref: "#/components/schemas/GameSettings"
        - $ref: "#/components/schemas/GameParticipants"
      properties:
        warmupEndTime:
          type: string
          format: date-time
          description: When the warmup phase is currently scheduled to end, and the game starts. This may be interrupted if players leave, or if the game is started early by an admin

    InProgressGameInfo:
      type: object
      description: Information about a game that has started and is in progress
      allOf:
        - $ref: "#/components/schemas/GameSettings"
        - $ref: "#/components/schemas/GameParticipants"
      properties:
        startTime:
          type: string
          format: date-time
          description: When the game started

        endTime:
          type: string
          format: date-time
          description: When the current round's time limit will end

        gameMode:
          type: string
          enum: ["fastest", "reverse", "golf", "arcade"]
          description: Which game mode is being played

        totalRounds:
          type: integer
          minimum: 1
          description: How many rounds will be played in this game

        currentRound:
          type: integer
          minimum: 1
          description: "Which round is currently being played. Invariant: 1 <= currentRound <= totalRounds"

        finishedParticipants:
          type: array
          description: Information about players who have finished the current round
          items:
            $ref: "#/components/schemas/GameParticipantSubmission"

    RoundEndedGameInfo:
      type: object
      description: Information about a game whose current round has ended. A new round may be scheduled to start, or the game may be over.
      allOf:
        - $ref: "#/components/schemas/GameSettings"
        - $ref: "#/components/schemas/GameParticipants"

      properties:
        winner:
          type: string
          description: The name of the player who won the game

        submissions:
          type: array
          description: Information about the submissions made by each player in the game
          items:
            type: object
            allOf:
              - $ref: "#/components/schemas/GameParticipantSubmission"

            properties:
              code:
                type: string
                description: The code that was submitted. If omitted, the player has chosen to hide their code.

        gameFinished:
          type: boolean
          description:
            Whether the game is complete - i.e. there are no more rounds to be played.
            If this is false, clients should assume that a new "Game Started" event will be sent soon.

    GameParticipant:
      type: object
      description: Participant object
      required:
        - name
      properties:
        name:
          type: string
          maxLength: 36

    GameParticipants:
      type: object
      description: Information about the participants in a game

      required:
        - participants
        - admin

      properties:
        participants:
          type: array
          items:
            $ref: "#/components/schemas/GameParticipant"
          description: The names of the players currently in the game

        admin:
          type: string
          description: The name of the player who created the game

    GameParticipantSubmission:
      type: object
      description: Information about a player's submission in a game
      required: [name, language]
      properties:
        name:
          type: string
          description: The name of the player
        language:
          type: string
          description: The language of the player's solution
        correctPercentage:
          type: number
          description: The percentage of challenges the player solved correctly. If omitted, the code is still being tested.

    GameSettings:
      type: object
      description: Settings for a Codosseum game

      properties:
        allowedLanguages:
          type: array
          items:
            type: string
          description: Which programming languages are allowed to be used for submissions. If omitted, all languages are allowed.
          minItems: 1

        allowedGameModes:
          type: array
          items:
            type: string
            enum: ["fastest", "reverse", "golf", "arcade"]
          description: Which game modes should be played. Each game will select a random game mode from this array. If omitted, all game modes may be picked.

        maxPlayers:
          type: integer
          minimum: 2
          default: 10
          maximum: 50
          description: Maximum player count for the game

        timeLimit:
          type: integer
          minimum: 60
          maximum: 1800
          default: 900
          description: Time limit for the game, in seconds.

        maxWarmupTime:
          type: integer
          default: 60
          minimum: 0
          maximum: 300
          description: Maximum warmup time for a game in seconds - that is, a timer that starts once 2 or more players have joined the game that delays the starting of the game to allow more players to join.
