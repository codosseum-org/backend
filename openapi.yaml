# SPDX-FileCopyrightText: 2023 JohnnyJayJay
# SPDX-FileCopyrightText: 2023 Alex Wood
#
# SPDX-License-Identifier: Apache-2.0
openapi: 3.1.0
servers:
  # Added by API Auto Mocking Plugin
  - description: SwaggerHub API Auto Mocking
    url: https://virtserver.swaggerhub.com/ALEXLJWOOD24/Codosseum/1.0.0
info:
  description: "This document specifies the HTTP API of a codosseum backend server."
  version: "0.1.0"
  title: Codosseum API
  license:
    name: Apache License 2.0
    identifier: Apache-2.0
tags:
  - name: games
    description: Things to do with games
  - name: developers
    description: Operations available to regular developers
paths:
  /games:
    post:
      tags:
        - games
      operationId: createGame
      summary: Create a new game
      responses:
        "201":
          description: new game created
          headers:
            Location:
              description: URL of the newly created game
              schema:
                type: string
                format: uri-reference
          content:
            application/json:
              schema:
                type: object
                properties:
                  adminKey:
                    type: string
                    description: Key to manage the game and participate
                  id:
                    type: string
                    description: ID of the newly created game
        "400":
          description: "invalid input, object invalid"
        "409":
          description: If your IP address has already created a game in progress
      requestBody:
        content:
          application/json:
            schema:
              type: object
              description: Settings for the new game
              allOf:
                - $ref: "#/components/schemas/GameSettings"
              properties:
                allowedGameModes:
                  type: array
                  items:
                    $ref: "#/components/schemas/GameMode"
                    description: |
                      If `gameMode` is not given, the new game will select a random game mode from this array.
                      If both this array and the `gameMode` option are omitted, a game mode will be picked from all available game modes.
  /games/{id}:
    parameters:
      - $ref: "#/components/parameters/pathGameId"

    get:
      tags: [games]
      operationId: getGame
      summary: Get everything known about a game
      responses:
        "200":
          description: success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Game"
        "404":
          description: game does not exist

    patch:
      tags: [games]
      operationId: updateGame
      summary: Update game settings
      description: (Partially) updates the settings of an existing game. This is only possible during the warmup phase of the game.
      security:
        - gameKey: [admin]
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/GameSettings"
      responses:
        "200":
          description: success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GameSettings"
        "400":
          description: malformed request body
        "401":
          description: No valid key provided
        "403":
          description: Key doesn't have admin privileges (cannot update game)
        "404":
          description: game does not exist
        "409":
          description: You have permission to edit this game, but it is already in progress

    delete:
      tags: [games]
      operationId: deleteGame
      summary: Delete a game
      description: Can be used by the admin of a game to delete it while in warmup.
      security:
        - gameKey: [admin]
      responses:
        "204":
          description: Sucessfully deleted
        "401":
          description: No valid key provided
        "403":
          description: Key doesn't have admin privileges
        "404":
          description: game does not exist
        "409":
          description: You have permission to delete this game, but it is already in progress

  /games/{id}/players:
    parameters:
      - $ref: "#/components/parameters/pathGameId"

    post:
      tags: [games]
      operationId: joinGame
      summary: Join a game

      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Player"

      responses:
        "200":
          description: Successfully joined the game
          content:
            application/json:
              schema:
                type: object
                required:
                  - key
                properties:
                  key:
                    type: string
                    description: A submission key that can be used to submit code to the game
        "400":
          description: Malformed request body
        "404":
          description: If the game does not exist
        "409":
          description: |
            If the game is not in a joinable state,
            or if the player has already joined the game (by IP address),
            or if a username is provided and it is already taken
    get:
      tags: [games]
      operationId: getPlayers
      summary: Get list of players in a game
      responses:
        "200":
          description: success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Players"
        "404":
          description: The game does not exist

  /games/{id}/players/@self:
    parameters:
      - $ref: "#/components/parameters/pathGameId"

    delete:
      tags: [games]
      operationId: leaveGame
      summary: Leave a game
      security:
        - gameKey: []
      responses:
        "204":
          description: Successfully left game
        "401":
          description: Not authenticated with a submission key
        "409":
          description: Not a player of this game (anymore)
        "404":
          description: If the game does not exist

  /games/{id}/start:
    parameters:
      - $ref: "#/components/parameters/pathGameId"

    post:
      tags: [games]
      operationId: startGame
      summary: Start a game
      description: Forcefully start a game, regardless of player-count and warmup time
      security:
        - gameKey: [admin]
      responses:
        "204":
          description: Successfully started the game. Further info will be received via server-sent events.
        "401":
          description: Authentication missing or not valid for this game
        "403":
          description: Authentication given and valid for this game, but the token does not have admin privileges
        "404":
          description: game does not exist
        "409":
          description: If the game is already started

  /games/{id}/template:
    parameters:
      - $ref: "#/components/parameters/pathGameId"

    get:
      tags: [games]
      operationId: getCodeTemplate
      summary: Get template code for a challenge
      description: Get a code template for the current challenge for the specified programming language
      parameters:
        - name: lang
          in: query
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Template created and sent successfully
          content:
            text/plain: {}
        "400":
          description: invalid language
        "404":
          description: game does not exist
        "409":
          description: no active round in this game, therefore no template available


  /games/{id}/solutions/test:
    parameters:
      - $ref: "#/components/parameters/pathGameId"

    post:
      tags: [games, solutions]
      operationId: testSolution
      summary: Test your solution
      description: Test a given solution to a game's challenges, returning the test results without submitting the solution
      security:
        - gameKey: []

      parameters:
        - name: testNumbers
          in: query
          description: The test numbers (public tests) to run the code against. If omitted, all tests will be run.
          schema:
            type: array
            items:
              type: integer
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Submission"

      responses:
        "200":
          # Should we introduce a mechanism to cancel tests?
          description: Acknowledgement that the solution was received and is being tested, results will be sent via Server-Sent Events
          content:
            application/json:
              schema:
                type: object
                properties:
                  testId:
                    type: string
                    description: An string to allow clients to associate future incoming test results with which request they respond to.

        "400":
          description: malformed request body

        "404":
          description: game does not exist

        "409":
          description:
            If the game is not in a state where solutions can be tested,
            or the player has already submitted a solution,
            or the player is not in the game

  /games/{id}/solutions/submit:
    parameters:
      - $ref: "#/components/parameters/pathGameId"
    post:
      tags: [games, solutions]
      operationId: submitSolution
      summary: Submit a solution
      description: Submit a solution to a game's challenges
      security:
        - gameKey: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Submission"

      responses:
        "204":
          description: Acknowledgement that the solution was received and is being tested, results will be sent via Server-Sent Events. The submission token is invalidated and may not be used again.

        "400":
          description: malformed request body

        "404":
          description: game does not exist

        "409":
          description:
            If the game is not in a state where solutions can be submitted,
            or the player has already submitted a solution,
            or the player is not in the game

  /games/{id}/rounds/{round}:
    parameters:
      - $ref: "#/components/parameters/pathGameId"
      - $ref: "#/components/parameters/pathRoundNumber"
    get:
      tags: [games]
      operationId: getRound
      summary: Get information about a round of a game
      description: |
        Get the details of a specific round, including (interim) results, or the most recent round if none specified.
        If authenticated with a game key and the corresponding player has already submitted a solution in
        the round in question, the response may also contain the code of the other players who have participated.
        Regardless of authentication, all the info may be returned if the round is already over.
        To request the transmission of the code players have submitted, set the withCode query parameter.
      security:
        - gameKey: []
        - {}
      parameters:
        - name: withCode
          in: query
          description: Whether to include the code of all players
          schema:
            type: boolean

      responses:
        "200":
          description: Returns the result in winning order.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Round"
        "400":
          description: invalid round specified
        "401":
          description: authentication provided but invalid for this game
        "404":
          description: game or round does not exist (yet)

  /games/{id}/rounds/{round}/results/{player}:
    parameters:
      - $ref: "#/components/parameters/pathGameId"
      - $ref: "#/components/parameters/pathRoundNumber"
      - name: player
        in: path
        description: Name of the player whose results should be retrieved
        required: true
        schema:
          type: string
    get:
      tags: [games]
      operationId: getRoundResults
      summary: Get results from a round of a game for a specific player
      description: |
        Returns the full result of a player for a specific round.
        This is useful as a supplement to GET /games/{id}/rounds/{round}
        if you want to display the code of each player upon request but don't want to request everything at once.
        The same authentication rules as in this other endpoint apply regarding visibility of code.
      security:
        - gameKey: []
        - {}
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PlayerRoundResult"
        "400":
          description: invalid round or player name
        "401":
          description: authentication provided but invalid for this game
        "404":
          description: game, round or player does not exist
        "409":
          description: player has not submitted results in this round (yet)



  /games/{id}/events:
    parameters:
      - $ref: "#/components/parameters/pathGameId"
    get:
      tags: [games]
      operationId: subscribeToGameEvents
      summary: Receive events relating to a game
      description: |
        You should use a tool specifically for server-sent events for interacting with this endpoint.
        Authentication with a *game key* is optional - if a game key for the specified game is provided,
        the server will send events that are exclusive to the corresponding player, such as test results.

        Server-sent events (SSE) are a crucial part of this API.
        In the path definition below, they're described using OAS but clients probably can't rely on tooling to
        implement this for them.
        The event stram is described as an array whose items are of "one of" the event types.
        (Inspiration taken from https://github.com/OAI/OpenAPI-Specification/issues/396#issuecomment-894718960)
        Event IDs may be sent as well, even though they're not specified here.
        The data section of the events is always encoded as JSON.
      security:
        - gameKey: []
        - {}
      responses:
        "200":
          description: Success - events will be sent.
          content:
            text/event-stream:
              schema:
                type: array
                format: event-stream
                items:
                  oneOf:
                    - type: object
                      properties:
                        event:
                          const: gameUpdate
                        data:
                          $ref: "#/components/schemas/GameUpdateEvent"
                    - type: object
                      properties:
                        event:
                          const: playerJoin
                        data:
                          $ref: "#/components/schemas/PlayerJoinEvent"
                    - type: object
                      properties:
                        event:
                          const: playerLeave
                        data:
                          $ref: "#/components/schemas/PlayerLeaveEvent"
                    - type: object
                      properties:
                        event:
                          const: roundStart
                        data:
                          $ref: "#/components/schemas/RoundStartEvent"
                    - type: object
                      description: |
                        This event doesn't have data associated with it because all relevant data is received
                        before this event through PlayerSubmitEvent, PlayerFinishEvent and PlayerCodeRevealEvent.
                        To get everything at once proactively, GET /games/{id}/rounds/results can be used.
                      properties:
                        event:
                          const: roundOver
                    - type: object
                      properties:
                        event:
                          const: playerSubmit
                        data:
                          $ref: "#/components/schemas/PlayerSubmitEvent"
                    - type: object
                      properties:
                        event:
                          const: playerCodeReveal
                        data:
                          $ref: "#/components/schemas/PlayerCodeRevealEvent"
                    - type: object
                      properties:
                        event:
                          const: playerFinish
                        data:
                          $ref: "#/components/schemas/PlayerFinishEvent"
                    - type: object
                      properties:
                        event:
                          const: testResult
                        data:
                          $ref: "#/components/schemas/TestResultEvent"
                    - type: object
                      properties:
                        event:
                          const: sync
                        data:
                          $ref: "#/components/schemas/SyncEvent"
                    - type: object
                      properties:
                        event:
                          const: eliminated
                        data:
                          $ref: "#/components/schemas/EliminatedEvent"
                    - type: object
                      properties:
                        event:
                          const: gameOver
                        data:
                          $ref: "#/components/schemas/GameOverEvent"
        "401":
          description: Authentication (game key) is provided but it is not valid for this game. This is *not* returned if *no* authentication is provided.
        "409":
          description: Game is already over.



components:
  securitySchemes:
    gameKey:
      type: apiKey
      description: |
        A key belonging to a player of a game.
        Is used to identify players when they perform actions relating to themselves,
        such as submitting a solution or leaving their game.

        Game keys can be either *admin* (role "admin") or *regular* keys (no roles).
        An admin key is given to the creator of a game and enables management of the game.
      name: Authorization
      in: header

  parameters:
    pathGameId:
      in: path
      name: id
      required: true
      description: Game ID (returned from creating a game)
      schema:
        type: string
    pathRoundNumber:
      name: round
      in: path
      required: true
      description: The number of the round in question
      schema:
        type: integer

  schemas:

    # Events
    GameUpdateEvent:
      $ref: "#/components/schemas/GameSettings"
    PlayerJoinEvent:
      $ref: "#/components/schemas/Player"
    PlayerLeaveEvent:
      $ref: "#/components/schemas/Player"
    RoundStartEvent:
      type: object
      description: Fired when a new round starts
      required: [challenge, number]
      properties:
        challenge:
          description: Challenge for this round
          $ref: "./challenge-schema.json"
        number:
          type: integer
          description: round number
    PlayerSubmitEvent:
      type: object
      description: Fired when a player clicks submit (but the results are not in yet)
      required: [name, lang, time]
      properties:
        name:
          type: string
          description: Player name

    PlayerCodeRevealEvent:
      type: object
      description: |
        Fired when the submitted code of a player becomes available to the consumer of the event stream.
        Players see opponents' code as soon as they have submitted their code themselves.
        Everyone else sees the players' solutions after the round has ended.

      properties:
        name:
          type: string
          description: Player name
        language:
          type: string
          description: Language used
        code:
          type: string
          description: Code they submitted

    PlayerFinishEvent:
      description: |
        Fired after a player's solution has gone through all submission tests and the final result for the player has been determined.
        This event contains all values that were sent in the PlayerSubmitEvent before as well as the score of the player.
      $ref: "#/components/schemas/PlayerRoundResult"


    TestResultEvent:
      type: object
      description: |
        Sent (asynchronously) in response to a request asking to run a test for a solution.
        This event is sent for every individual test that fails or succeeds.
      properties:
        testId:
          type: string
          description: the ID returned when the test runs were requested. This can be used to determine the state of the solution when the test request was made.
        num:
          type: integer
          description: Test number that was run
        result:
          type: object
          description: Test result. input, expectedOutput and actualOutput are only sent if the test failed.
          required: [pass]
          properties:
            pass:
              type: boolean
              description: Whether the test passed or not
            input:
              type: array
              description: test input
              items:
                type: string
            expectedOutput:
              type: array
              description: correct output
              items:
                type: string
            actualOutput:
              type: array
              description: output produced by the player's code
              items:
                type: string


    SyncEvent:
      type: object
      description: Sent to synchronise clock and game state between server and clients.
      properties:
        state:
          $ref: "#/components/schemas/GameState"
          description: Current game state
        timeLeft:
          type: integer
          description: Time left in seconds until "next thing" (warmup countdown, round timer, next rount countdown)

    EliminatedEvent:
      type: object
      description: Sent to a player if they have been eliminated from the game. This is not relevant for all game modes.
      properties:
        message:
          type: string
          description: Message detailing elimination.

    GameOverEvent:
      type: object
      description: Fired after the last round of a game is over. Contains final results of the game (may vary depending on game mode)
      properties:
        finalResults:
          type: array
          items:
            $ref: "#/components/schemas/PlayerGameResult"


    # Other
    Submission:
      type: object
      required:
        - language
        - code
      properties:

        language:
          type: string
          description: The language of the solution attempt, as an identifier supported by Piston

        code:
          type: string
          description: The code to test, which is assumed to be in the language specified

    Round:
      type: object
      description: Information about a game round
      properties:
        challenge:
          description: Challenge for that round
          $ref: "./challenge-schema.json"
        over:
          type: boolean
          description: True if the round is over, false otherwise
        results:
          type: array
          description: (Partial) results of the round, depending on its progress. Ordered from best to worst.
          items:
            $ref: "#/components/schemas/PlayerRoundResult"

    PlayerRoundResult:
      type: object
      required: [name, language, byteCount, timeLeft]
      properties:
        name:
          type: string
          description: Name of the player
        language:
          type: string
          description: Language they used
        code:
          type: string
          description: Code submitted by the player. Optional.
        byteCount:
          type: integer
          description: Number of bytes in the solution (relevant for golfing modes)
        timeLeft:
          type: integer
          description: time left on the clock (in seconds) when they pressed submit
        score:
          type: object
          properties:
            testsRun:
              type: integer
              description: Number of tests run
            testsPassed:
              type: integer
              description: Number of tests passed
            averageRuntime:
              type: number
              format: double
              description: Average runtime in milliseconds

    PlayerGameResult:
      type: object
      description: The final result of a player, after all rounds (and therefore the game) are over.
      properties:
        score:
          type: number
          description: |
            An overall (abstract) score determined by the game mode.
            This score is computed based on the cumulative performance in the rounds in which the player participated.
            It is abstract in the sense that every game mode computes it differently – It's only transparent that higher
            equals better.

    Game:
      type: object
      description: Information about a game
      allOf:
        - $ref: "#/components/schemas/GameSettings"
      required: [players, state, allowedLanguages, gameMode, maxPlayers, timeLimit, maxWarmupTime]
      properties:
        id:
          type: string
          description: Game ID
        state:
          $ref: "#/components/schemas/GameState"
          description: current game state
        timeLeft:
          type: integer
          description: Time left on the clock for the current game state. If state is "gameOver", this value is absent
        players:
          $ref: "#/components/schemas/Players"
        results:
          type: array
          description: |
            Game results. This is different from *round results* in that it combines the results from all rounds thus far
            and interprets them according to the game mode being played. Progressive/partial results are given throughout the game,
            even if it is not over yet. Ordered from best (so far) to worst.
          items:
            $ref: "#/components/schemas/PlayerGameResult"
        round:
          type: integer
          description: Number of  the currently active round ("inProgress") or the most recent round ("roundOver", "gameOver"). Absent if state = "warmup"

    Player:
      type: object
      description: Player object
      required:
        - name
      properties:
        name:
          type: string
          maxLength: 36

    Players:
      type: object
      description: Information about the players in a game

      required:
        - players
        - admin

      properties:
        players:
          type: array
          items:
            $ref: "#/components/schemas/Player"
          description: The names of the players currently in the game

        admin:
          type: string
          description: The name of the player who created the game

    GameState:
      type: string
      enum: ["warmup", "inProgress", "roundOver", "gameOver"]
      description: The available game states

    GameMode:
      type: string
      enum: ["fastest", "reverse", "golf", "arcade", "battleRoyale"]
      description: A game mode supported by codosseum

    GameSettings:
      type: object
      description: Settings for a Codosseum game

      properties:
        allowedLanguages:
          type: array
          items:
            type: string
          description: Which programming languages are allowed to be used for submissions. If omitted, all languages are allowed.
          minItems: 1

        gameMode:
          description: Game mode of this game
          $ref: "#/components/schemas/GameMode"

        maxPlayers:
          type: integer
          minimum: 2
          default: 10
          maximum: 50
          description: Maximum player count for the game

        timeLimit:
          type: integer
          minimum: 60
          maximum: 1800
          default: 900
          description: Time limit for the game, in seconds.

        maxWarmupTime:
          type: integer
          default: 60
          minimum: 0
          maximum: 300
          description: Maximum warmup time for a game in seconds - that is, a timer that starts once 2 or more players have joined the game that delays the starting of the game to allow more players to join.
